/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AuthorizeNet.Rest.Client;
using AuthorizeNet.Rest.Model;

namespace AuthorizeNet.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create A Webhook
        /// </summary>
        /// <remarks>
        /// Enroll in one or more particular type of event notification
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>GetWebhookResponse</returns>
        GetWebhookResponse CreateWebhook (CreateWebhookBody createWebhookBody, string authorization = null);

        /// <summary>
        /// Create A Webhook
        /// </summary>
        /// <remarks>
        /// Enroll in one or more particular type of event notification
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of GetWebhookResponse</returns>
        ApiResponse<GetWebhookResponse> CreateWebhookWithHttpInfo (CreateWebhookBody createWebhookBody, string authorization = null);
        /// <summary>
        /// Delete A Webhook
        /// </summary>
        /// <remarks>
        /// Delete an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns></returns>
        void DeleteWebhook (string webhookId, string authorization = null);

        /// <summary>
        /// Delete A Webhook
        /// </summary>
        /// <remarks>
        /// Delete an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookWithHttpInfo (string webhookId, string authorization = null);
        /// <summary>
        /// Get A Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve details of an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>GetWebhookResponse</returns>
        GetWebhookResponse GetWebhook (string webhookId, string authorization = null);

        /// <summary>
        /// Get A Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve details of an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of GetWebhookResponse</returns>
        ApiResponse<GetWebhookResponse> GetWebhookWithHttpInfo (string webhookId, string authorization = null);
        /// <summary>
        /// List My Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve details of existing Webhooks
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>List&lt;GetWebhookResponse&gt;</returns>
        List<GetWebhookResponse> GetWebhooks (string authorization = null);

        /// <summary>
        /// List My Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve details of existing Webhooks
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of List&lt;GetWebhookResponse&gt;</returns>
        ApiResponse<List<GetWebhookResponse>> GetWebhooksWithHttpInfo (string authorization = null);
        /// <summary>
        /// Pings A Webhook
        /// </summary>
        /// <remarks>
        /// A test event is sent to the Webhook (in an inactive state) endpoint
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns></returns>
        void PingsWebhook (string webhookId, string authorization = null);

        /// <summary>
        /// Pings A Webhook
        /// </summary>
        /// <remarks>
        /// A test event is sent to the Webhook (in an inactive state) endpoint
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PingsWebhookWithHttpInfo (string webhookId, string authorization = null);
        /// <summary>
        /// Update A Webhook
        /// </summary>
        /// <remarks>
        /// Update an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="updateWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>GetWebhookResponse</returns>
        GetWebhookResponse UpdateWebhook (string webhookId, CreateWebhookBody updateWebhookBody, string authorization = null);

        /// <summary>
        /// Update A Webhook
        /// </summary>
        /// <remarks>
        /// Update an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="updateWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of GetWebhookResponse</returns>
        ApiResponse<GetWebhookResponse> UpdateWebhookWithHttpInfo (string webhookId, CreateWebhookBody updateWebhookBody, string authorization = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create A Webhook
        /// </summary>
        /// <remarks>
        /// Enroll in one or more particular type of event notification
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of GetWebhookResponse</returns>
        System.Threading.Tasks.Task<GetWebhookResponse> CreateWebhookAsync (CreateWebhookBody createWebhookBody, string authorization = null);

        /// <summary>
        /// Create A Webhook
        /// </summary>
        /// <remarks>
        /// Enroll in one or more particular type of event notification
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (GetWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWebhookResponse>> CreateWebhookAsyncWithHttpInfo (CreateWebhookBody createWebhookBody, string authorization = null);
        /// <summary>
        /// Delete A Webhook
        /// </summary>
        /// <remarks>
        /// Delete an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookAsync (string webhookId, string authorization = null);

        /// <summary>
        /// Delete A Webhook
        /// </summary>
        /// <remarks>
        /// Delete an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookAsyncWithHttpInfo (string webhookId, string authorization = null);
        /// <summary>
        /// Get A Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve details of an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of GetWebhookResponse</returns>
        System.Threading.Tasks.Task<GetWebhookResponse> GetWebhookAsync (string webhookId, string authorization = null);

        /// <summary>
        /// Get A Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve details of an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (GetWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWebhookResponse>> GetWebhookAsyncWithHttpInfo (string webhookId, string authorization = null);
        /// <summary>
        /// List My Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve details of existing Webhooks
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of List&lt;GetWebhookResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GetWebhookResponse>> GetWebhooksAsync (string authorization = null);

        /// <summary>
        /// List My Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve details of existing Webhooks
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetWebhookResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetWebhookResponse>>> GetWebhooksAsyncWithHttpInfo (string authorization = null);
        /// <summary>
        /// Pings A Webhook
        /// </summary>
        /// <remarks>
        /// A test event is sent to the Webhook (in an inactive state) endpoint
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PingsWebhookAsync (string webhookId, string authorization = null);

        /// <summary>
        /// Pings A Webhook
        /// </summary>
        /// <remarks>
        /// A test event is sent to the Webhook (in an inactive state) endpoint
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PingsWebhookAsyncWithHttpInfo (string webhookId, string authorization = null);
        /// <summary>
        /// Update A Webhook
        /// </summary>
        /// <remarks>
        /// Update an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="updateWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of GetWebhookResponse</returns>
        System.Threading.Tasks.Task<GetWebhookResponse> UpdateWebhookAsync (string webhookId, CreateWebhookBody updateWebhookBody, string authorization = null);

        /// <summary>
        /// Update A Webhook
        /// </summary>
        /// <remarks>
        /// Update an existing Webhook
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="updateWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (GetWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWebhookResponse>> UpdateWebhookAsyncWithHttpInfo (string webhookId, CreateWebhookBody updateWebhookBody, string authorization = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private AuthorizeNet.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = AuthorizeNet.Rest.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AuthorizeNet.Rest.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AuthorizeNet.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create A Webhook Enroll in one or more particular type of event notification
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>GetWebhookResponse</returns>
        public GetWebhookResponse CreateWebhook (CreateWebhookBody createWebhookBody, string authorization = null)
        {
             ApiResponse<GetWebhookResponse> localVarResponse = CreateWebhookWithHttpInfo(createWebhookBody, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create A Webhook Enroll in one or more particular type of event notification
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of GetWebhookResponse</returns>
        public ApiResponse< GetWebhookResponse > CreateWebhookWithHttpInfo (CreateWebhookBody createWebhookBody, string authorization = null)
        {
            // verify the required parameter 'createWebhookBody' is set
            if (createWebhookBody == null)
                throw new ApiException(400, "Missing required parameter 'createWebhookBody' when calling WebhooksApi->CreateWebhook");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (createWebhookBody != null && createWebhookBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createWebhookBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWebhookBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWebhookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWebhookResponse)));
            
        }

        /// <summary>
        /// Create A Webhook Enroll in one or more particular type of event notification
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of GetWebhookResponse</returns>
        public async System.Threading.Tasks.Task<GetWebhookResponse> CreateWebhookAsync (CreateWebhookBody createWebhookBody, string authorization = null)
        {
             ApiResponse<GetWebhookResponse> localVarResponse = await CreateWebhookAsyncWithHttpInfo(createWebhookBody, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create A Webhook Enroll in one or more particular type of event notification
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (GetWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetWebhookResponse>> CreateWebhookAsyncWithHttpInfo (CreateWebhookBody createWebhookBody, string authorization = null)
        {
            // verify the required parameter 'createWebhookBody' is set
            if (createWebhookBody == null)
                throw new ApiException(400, "Missing required parameter 'createWebhookBody' when calling WebhooksApi->CreateWebhook");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (createWebhookBody != null && createWebhookBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createWebhookBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWebhookBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWebhookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWebhookResponse)));
            
        }

        /// <summary>
        /// Delete A Webhook Delete an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns></returns>
        public void DeleteWebhook (string webhookId, string authorization = null)
        {
             DeleteWebhookWithHttpInfo(webhookId, authorization);
        }

        /// <summary>
        /// Delete A Webhook Delete an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookWithHttpInfo (string webhookId, string authorization = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->DeleteWebhook");

            var localVarPath = "/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webhookId != null) localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete A Webhook Delete an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookAsync (string webhookId, string authorization = null)
        {
             await DeleteWebhookAsyncWithHttpInfo(webhookId, authorization);

        }

        /// <summary>
        /// Delete A Webhook Delete an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookAsyncWithHttpInfo (string webhookId, string authorization = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->DeleteWebhook");

            var localVarPath = "/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webhookId != null) localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get A Webhook Retrieve details of an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>GetWebhookResponse</returns>
        public GetWebhookResponse GetWebhook (string webhookId, string authorization = null)
        {
             ApiResponse<GetWebhookResponse> localVarResponse = GetWebhookWithHttpInfo(webhookId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get A Webhook Retrieve details of an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of GetWebhookResponse</returns>
        public ApiResponse< GetWebhookResponse > GetWebhookWithHttpInfo (string webhookId, string authorization = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->GetWebhook");

            var localVarPath = "/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webhookId != null) localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWebhookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWebhookResponse)));
            
        }

        /// <summary>
        /// Get A Webhook Retrieve details of an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of GetWebhookResponse</returns>
        public async System.Threading.Tasks.Task<GetWebhookResponse> GetWebhookAsync (string webhookId, string authorization = null)
        {
             ApiResponse<GetWebhookResponse> localVarResponse = await GetWebhookAsyncWithHttpInfo(webhookId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get A Webhook Retrieve details of an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (GetWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetWebhookResponse>> GetWebhookAsyncWithHttpInfo (string webhookId, string authorization = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->GetWebhook");

            var localVarPath = "/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webhookId != null) localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWebhookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWebhookResponse)));
            
        }

        /// <summary>
        /// List My Webhooks Retrieve details of existing Webhooks
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>List&lt;GetWebhookResponse&gt;</returns>
        public List<GetWebhookResponse> GetWebhooks (string authorization = null)
        {
             ApiResponse<List<GetWebhookResponse>> localVarResponse = GetWebhooksWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List My Webhooks Retrieve details of existing Webhooks
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of List&lt;GetWebhookResponse&gt;</returns>
        public ApiResponse< List<GetWebhookResponse> > GetWebhooksWithHttpInfo (string authorization = null)
        {

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetWebhookResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetWebhookResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetWebhookResponse>)));
            
        }

        /// <summary>
        /// List My Webhooks Retrieve details of existing Webhooks
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of List&lt;GetWebhookResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetWebhookResponse>> GetWebhooksAsync (string authorization = null)
        {
             ApiResponse<List<GetWebhookResponse>> localVarResponse = await GetWebhooksAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List My Webhooks Retrieve details of existing Webhooks
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetWebhookResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetWebhookResponse>>> GetWebhooksAsyncWithHttpInfo (string authorization = null)
        {

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetWebhookResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetWebhookResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetWebhookResponse>)));
            
        }

        /// <summary>
        /// Pings A Webhook A test event is sent to the Webhook (in an inactive state) endpoint
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns></returns>
        public void PingsWebhook (string webhookId, string authorization = null)
        {
             PingsWebhookWithHttpInfo(webhookId, authorization);
        }

        /// <summary>
        /// Pings A Webhook A test event is sent to the Webhook (in an inactive state) endpoint
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PingsWebhookWithHttpInfo (string webhookId, string authorization = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->PingsWebhook");

            var localVarPath = "/webhooks/{webhookId}/pings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webhookId != null) localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PingsWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Pings A Webhook A test event is sent to the Webhook (in an inactive state) endpoint
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PingsWebhookAsync (string webhookId, string authorization = null)
        {
             await PingsWebhookAsyncWithHttpInfo(webhookId, authorization);

        }

        /// <summary>
        /// Pings A Webhook A test event is sent to the Webhook (in an inactive state) endpoint
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PingsWebhookAsyncWithHttpInfo (string webhookId, string authorization = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->PingsWebhook");

            var localVarPath = "/webhooks/{webhookId}/pings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webhookId != null) localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PingsWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update A Webhook Update an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="updateWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>GetWebhookResponse</returns>
        public GetWebhookResponse UpdateWebhook (string webhookId, CreateWebhookBody updateWebhookBody, string authorization = null)
        {
             ApiResponse<GetWebhookResponse> localVarResponse = UpdateWebhookWithHttpInfo(webhookId, updateWebhookBody, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update A Webhook Update an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="updateWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of GetWebhookResponse</returns>
        public ApiResponse< GetWebhookResponse > UpdateWebhookWithHttpInfo (string webhookId, CreateWebhookBody updateWebhookBody, string authorization = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->UpdateWebhook");
            // verify the required parameter 'updateWebhookBody' is set
            if (updateWebhookBody == null)
                throw new ApiException(400, "Missing required parameter 'updateWebhookBody' when calling WebhooksApi->UpdateWebhook");

            var localVarPath = "/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webhookId != null) localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (updateWebhookBody != null && updateWebhookBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateWebhookBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWebhookBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWebhookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWebhookResponse)));
            
        }

        /// <summary>
        /// Update A Webhook Update an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="updateWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of GetWebhookResponse</returns>
        public async System.Threading.Tasks.Task<GetWebhookResponse> UpdateWebhookAsync (string webhookId, CreateWebhookBody updateWebhookBody, string authorization = null)
        {
             ApiResponse<GetWebhookResponse> localVarResponse = await UpdateWebhookAsyncWithHttpInfo(webhookId, updateWebhookBody, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update A Webhook Update an existing Webhook
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to return</param>
        /// <param name="updateWebhookBody">the \&quot;CreateWebhookBody\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (GetWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetWebhookResponse>> UpdateWebhookAsyncWithHttpInfo (string webhookId, CreateWebhookBody updateWebhookBody, string authorization = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->UpdateWebhook");
            // verify the required parameter 'updateWebhookBody' is set
            if (updateWebhookBody == null)
                throw new ApiException(400, "Missing required parameter 'updateWebhookBody' when calling WebhooksApi->UpdateWebhook");

            var localVarPath = "/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webhookId != null) localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (updateWebhookBody != null && updateWebhookBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateWebhookBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWebhookBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetWebhookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWebhookResponse)));
            
        }

    }
}
