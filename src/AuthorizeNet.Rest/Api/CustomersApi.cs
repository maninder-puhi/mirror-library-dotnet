/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AuthorizeNet.Rest.Client;
using AuthorizeNet.Rest.Model;

namespace AuthorizeNet.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create A Customer
        /// </summary>
        /// <remarks>
        /// Create A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomer">the \&quot;CreateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Customer</returns>
        Customer CreateCustomer (CreateCustomer createCustomer, string authorization = null);

        /// <summary>
        /// Create A Customer
        /// </summary>
        /// <remarks>
        /// Create A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomer">the \&quot;CreateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CreateCustomerWithHttpInfo (CreateCustomer createCustomer, string authorization = null);
        /// <summary>
        /// Delete customer
        /// </summary>
        /// <remarks>
        /// Deletes a Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns></returns>
        void DeleteCustomer (string customerId, string authorization = null);

        /// <summary>
        /// Delete customer
        /// </summary>
        /// <remarks>
        /// Deletes a Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomerWithHttpInfo (string customerId, string authorization = null);
        /// <summary>
        /// Get All Customers
        /// </summary>
        /// <remarks>
        /// Get All Customers
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>CustomerCollection</returns>
        CustomerCollection GetAllCustomers (string authorization = null);

        /// <summary>
        /// Get All Customers
        /// </summary>
        /// <remarks>
        /// Get All Customers
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of CustomerCollection</returns>
        ApiResponse<CustomerCollection> GetAllCustomersWithHttpInfo (string authorization = null);
        /// <summary>
        /// Get A Customer
        /// </summary>
        /// <remarks>
        /// Get A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Customer</returns>
        Customer GetCustomer (string customerId, string authorization = null);

        /// <summary>
        /// Get A Customer
        /// </summary>
        /// <remarks>
        /// Get A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> GetCustomerWithHttpInfo (string customerId, string authorization = null);
        /// <summary>
        /// Update A Customer
        /// </summary>
        /// <remarks>
        /// Update A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="createCustomer">the \&quot;UpdateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Customer</returns>
        Customer UpdateCustomer (string customerId, CreateCustomer createCustomer, string authorization = null);

        /// <summary>
        /// Update A Customer
        /// </summary>
        /// <remarks>
        /// Update A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="createCustomer">the \&quot;UpdateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> UpdateCustomerWithHttpInfo (string customerId, CreateCustomer createCustomer, string authorization = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create A Customer
        /// </summary>
        /// <remarks>
        /// Create A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomer">the \&quot;CreateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CreateCustomerAsync (CreateCustomer createCustomer, string authorization = null);

        /// <summary>
        /// Create A Customer
        /// </summary>
        /// <remarks>
        /// Create A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomer">the \&quot;CreateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerAsyncWithHttpInfo (CreateCustomer createCustomer, string authorization = null);
        /// <summary>
        /// Delete customer
        /// </summary>
        /// <remarks>
        /// Deletes a Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomerAsync (string customerId, string authorization = null);

        /// <summary>
        /// Delete customer
        /// </summary>
        /// <remarks>
        /// Deletes a Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerAsyncWithHttpInfo (string customerId, string authorization = null);
        /// <summary>
        /// Get All Customers
        /// </summary>
        /// <remarks>
        /// Get All Customers
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of CustomerCollection</returns>
        System.Threading.Tasks.Task<CustomerCollection> GetAllCustomersAsync (string authorization = null);

        /// <summary>
        /// Get All Customers
        /// </summary>
        /// <remarks>
        /// Get All Customers
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (CustomerCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerCollection>> GetAllCustomersAsyncWithHttpInfo (string authorization = null);
        /// <summary>
        /// Get A Customer
        /// </summary>
        /// <remarks>
        /// Get A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> GetCustomerAsync (string customerId, string authorization = null);

        /// <summary>
        /// Get A Customer
        /// </summary>
        /// <remarks>
        /// Get A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> GetCustomerAsyncWithHttpInfo (string customerId, string authorization = null);
        /// <summary>
        /// Update A Customer
        /// </summary>
        /// <remarks>
        /// Update A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="createCustomer">the \&quot;UpdateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> UpdateCustomerAsync (string customerId, CreateCustomer createCustomer, string authorization = null);

        /// <summary>
        /// Update A Customer
        /// </summary>
        /// <remarks>
        /// Update A Customer
        /// </remarks>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="createCustomer">the \&quot;UpdateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> UpdateCustomerAsyncWithHttpInfo (string customerId, CreateCustomer createCustomer, string authorization = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomersApi : ICustomersApi
    {
        private AuthorizeNet.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = AuthorizeNet.Rest.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AuthorizeNet.Rest.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AuthorizeNet.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create A Customer Create A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomer">the \&quot;CreateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Customer</returns>
        public Customer CreateCustomer (CreateCustomer createCustomer, string authorization = null)
        {
             ApiResponse<Customer> localVarResponse = CreateCustomerWithHttpInfo(createCustomer, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create A Customer Create A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomer">the \&quot;CreateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CreateCustomerWithHttpInfo (CreateCustomer createCustomer, string authorization = null)
        {
            // verify the required parameter 'createCustomer' is set
            if (createCustomer == null)
                throw new ApiException(400, "Missing required parameter 'createCustomer' when calling CustomersApi->CreateCustomer");

            var localVarPath = "/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (createCustomer != null && createCustomer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCustomer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomer; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Create A Customer Create A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomer">the \&quot;CreateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CreateCustomerAsync (CreateCustomer createCustomer, string authorization = null)
        {
             ApiResponse<Customer> localVarResponse = await CreateCustomerAsyncWithHttpInfo(createCustomer, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create A Customer Create A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomer">the \&quot;CreateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerAsyncWithHttpInfo (CreateCustomer createCustomer, string authorization = null)
        {
            // verify the required parameter 'createCustomer' is set
            if (createCustomer == null)
                throw new ApiException(400, "Missing required parameter 'createCustomer' when calling CustomersApi->CreateCustomer");

            var localVarPath = "/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (createCustomer != null && createCustomer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCustomer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomer; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Delete customer Deletes a Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns></returns>
        public void DeleteCustomer (string customerId, string authorization = null)
        {
             DeleteCustomerWithHttpInfo(customerId, authorization);
        }

        /// <summary>
        /// Delete customer Deletes a Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomerWithHttpInfo (string customerId, string authorization = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->DeleteCustomer");

            var localVarPath = "/customers/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete customer Deletes a Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomerAsync (string customerId, string authorization = null)
        {
             await DeleteCustomerAsyncWithHttpInfo(customerId, authorization);

        }

        /// <summary>
        /// Delete customer Deletes a Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerAsyncWithHttpInfo (string customerId, string authorization = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->DeleteCustomer");

            var localVarPath = "/customers/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get All Customers Get All Customers
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>CustomerCollection</returns>
        public CustomerCollection GetAllCustomers (string authorization = null)
        {
             ApiResponse<CustomerCollection> localVarResponse = GetAllCustomersWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Customers Get All Customers
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of CustomerCollection</returns>
        public ApiResponse< CustomerCollection > GetAllCustomersWithHttpInfo (string authorization = null)
        {

            var localVarPath = "/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerCollection)));
            
        }

        /// <summary>
        /// Get All Customers Get All Customers
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of CustomerCollection</returns>
        public async System.Threading.Tasks.Task<CustomerCollection> GetAllCustomersAsync (string authorization = null)
        {
             ApiResponse<CustomerCollection> localVarResponse = await GetAllCustomersAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Customers Get All Customers
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (CustomerCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerCollection>> GetAllCustomersAsyncWithHttpInfo (string authorization = null)
        {

            var localVarPath = "/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerCollection)));
            
        }

        /// <summary>
        /// Get A Customer Get A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Customer</returns>
        public Customer GetCustomer (string customerId, string authorization = null)
        {
             ApiResponse<Customer> localVarResponse = GetCustomerWithHttpInfo(customerId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get A Customer Get A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > GetCustomerWithHttpInfo (string customerId, string authorization = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomer");

            var localVarPath = "/customers/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Get A Customer Get A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> GetCustomerAsync (string customerId, string authorization = null)
        {
             ApiResponse<Customer> localVarResponse = await GetCustomerAsyncWithHttpInfo(customerId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get A Customer Get A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> GetCustomerAsyncWithHttpInfo (string customerId, string authorization = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomer");

            var localVarPath = "/customers/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Update A Customer Update A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="createCustomer">the \&quot;UpdateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Customer</returns>
        public Customer UpdateCustomer (string customerId, CreateCustomer createCustomer, string authorization = null)
        {
             ApiResponse<Customer> localVarResponse = UpdateCustomerWithHttpInfo(customerId, createCustomer, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update A Customer Update A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="createCustomer">the \&quot;UpdateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > UpdateCustomerWithHttpInfo (string customerId, CreateCustomer createCustomer, string authorization = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->UpdateCustomer");
            // verify the required parameter 'createCustomer' is set
            if (createCustomer == null)
                throw new ApiException(400, "Missing required parameter 'createCustomer' when calling CustomersApi->UpdateCustomer");

            var localVarPath = "/customers/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (createCustomer != null && createCustomer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCustomer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomer; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Update A Customer Update A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="createCustomer">the \&quot;UpdateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> UpdateCustomerAsync (string customerId, CreateCustomer createCustomer, string authorization = null)
        {
             ApiResponse<Customer> localVarResponse = await UpdateCustomerAsyncWithHttpInfo(customerId, createCustomer, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update A Customer Update A Customer
        /// </summary>
        /// <exception cref="AuthorizeNet.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Customer ID</param>
        /// <param name="createCustomer">the \&quot;UpdateCustomer\&quot; model</param>
        /// <param name="authorization">The value to provide in the Authorization header of ANET API request (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> UpdateCustomerAsyncWithHttpInfo (string customerId, CreateCustomer createCustomer, string authorization = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->UpdateCustomer");
            // verify the required parameter 'createCustomer' is set
            if (createCustomer == null)
                throw new ApiException(400, "Missing required parameter 'createCustomer' when calling CustomersApi->UpdateCustomer");

            var localVarPath = "/customers/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (createCustomer != null && createCustomer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCustomer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomer; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

    }
}
