/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AuthorizeNet.Rest.Model
{
    /// <summary>
    /// Notification Model
    /// </summary>
    [DataContract]
    public partial class Notification :  IEquatable<Notification>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Notification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Notification" /> class.
        /// </summary>
        /// <param name="Links">Links (required).</param>
        /// <param name="NotificationId">Label of the notification (required).</param>
        /// <param name="DeliveryStatus">Status of the pings (required).</param>
        /// <param name="EventType">Type of the pings (required).</param>
        /// <param name="EventDate">date time of the pings (required).</param>
        /// <param name="WebhookId">Label of the Webhook (required).</param>
        public Notification(SelfLink Links = null, string NotificationId = null, string DeliveryStatus = null, string EventType = null, string EventDate = null, string WebhookId = null)
        {
            // to ensure "Links" is required (not null)
            if (Links == null)
            {
                throw new InvalidDataException("Links is a required property for Notification and cannot be null");
            }
            else
            {
                this.Links = Links;
            }
            // to ensure "NotificationId" is required (not null)
            if (NotificationId == null)
            {
                throw new InvalidDataException("NotificationId is a required property for Notification and cannot be null");
            }
            else
            {
                this.NotificationId = NotificationId;
            }
            // to ensure "DeliveryStatus" is required (not null)
            if (DeliveryStatus == null)
            {
                throw new InvalidDataException("DeliveryStatus is a required property for Notification and cannot be null");
            }
            else
            {
                this.DeliveryStatus = DeliveryStatus;
            }
            // to ensure "EventType" is required (not null)
            if (EventType == null)
            {
                throw new InvalidDataException("EventType is a required property for Notification and cannot be null");
            }
            else
            {
                this.EventType = EventType;
            }
            // to ensure "EventDate" is required (not null)
            if (EventDate == null)
            {
                throw new InvalidDataException("EventDate is a required property for Notification and cannot be null");
            }
            else
            {
                this.EventDate = EventDate;
            }
            // to ensure "WebhookId" is required (not null)
            if (WebhookId == null)
            {
                throw new InvalidDataException("WebhookId is a required property for Notification and cannot be null");
            }
            else
            {
                this.WebhookId = WebhookId;
            }
        }
        
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public SelfLink Links { get; set; }
        /// <summary>
        /// Label of the notification
        /// </summary>
        /// <value>Label of the notification</value>
        [DataMember(Name="notificationId", EmitDefaultValue=false)]
        public string NotificationId { get; set; }
        /// <summary>
        /// Status of the pings
        /// </summary>
        /// <value>Status of the pings</value>
        [DataMember(Name="deliveryStatus", EmitDefaultValue=false)]
        public string DeliveryStatus { get; set; }
        /// <summary>
        /// Type of the pings
        /// </summary>
        /// <value>Type of the pings</value>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; set; }
        /// <summary>
        /// date time of the pings
        /// </summary>
        /// <value>date time of the pings</value>
        [DataMember(Name="eventDate", EmitDefaultValue=false)]
        public string EventDate { get; set; }
        /// <summary>
        /// Label of the Webhook
        /// </summary>
        /// <value>Label of the Webhook</value>
        [DataMember(Name="webhookId", EmitDefaultValue=false)]
        public string WebhookId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Notification {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  DeliveryStatus: ").Append(DeliveryStatus).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Notification);
        }

        /// <summary>
        /// Returns true if Notification instances are equal
        /// </summary>
        /// <param name="other">Instance of Notification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notification other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.NotificationId == other.NotificationId ||
                    this.NotificationId != null &&
                    this.NotificationId.Equals(other.NotificationId)
                ) && 
                (
                    this.DeliveryStatus == other.DeliveryStatus ||
                    this.DeliveryStatus != null &&
                    this.DeliveryStatus.Equals(other.DeliveryStatus)
                ) && 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.EventDate == other.EventDate ||
                    this.EventDate != null &&
                    this.EventDate.Equals(other.EventDate)
                ) && 
                (
                    this.WebhookId == other.WebhookId ||
                    this.WebhookId != null &&
                    this.WebhookId.Equals(other.WebhookId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.NotificationId != null)
                    hash = hash * 59 + this.NotificationId.GetHashCode();
                if (this.DeliveryStatus != null)
                    hash = hash * 59 + this.DeliveryStatus.GetHashCode();
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.EventDate != null)
                    hash = hash * 59 + this.EventDate.GetHashCode();
                if (this.WebhookId != null)
                    hash = hash * 59 + this.WebhookId.GetHashCode();
                return hash;
            }
        }
    }

}
