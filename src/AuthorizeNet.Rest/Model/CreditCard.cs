/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AuthorizeNet.Rest.Model
{
    /// <summary>
    /// Model for CreditCard
    /// </summary>
    [DataContract]
    public partial class CreditCard :  IEquatable<CreditCard>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditCard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCard" /> class.
        /// </summary>
        /// <param name="CardNumber">CardNumber (required).</param>
        /// <param name="ExpirationDate">ExpirationDate (required).</param>
        /// <param name="CardType">CardType.</param>
        /// <param name="CardCode">CardCode.</param>
        public CreditCard(string CardNumber = null, string ExpirationDate = null, string CardType = null, string CardCode = null)
        {
            // to ensure "CardNumber" is required (not null)
            if (CardNumber == null)
            {
                throw new InvalidDataException("CardNumber is a required property for CreditCard and cannot be null");
            }
            else
            {
                this.CardNumber = CardNumber;
            }
            // to ensure "ExpirationDate" is required (not null)
            if (ExpirationDate == null)
            {
                throw new InvalidDataException("ExpirationDate is a required property for CreditCard and cannot be null");
            }
            else
            {
                this.ExpirationDate = ExpirationDate;
            }
            this.CardType = CardType;
            this.CardCode = CardCode;
        }
        
        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }
        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }
        /// <summary>
        /// Gets or Sets CardType
        /// </summary>
        [DataMember(Name="cardType", EmitDefaultValue=false)]
        public string CardType { get; set; }
        /// <summary>
        /// Gets or Sets CardCode
        /// </summary>
        [DataMember(Name="cardCode", EmitDefaultValue=false)]
        public string CardCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCard {\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  CardCode: ").Append(CardCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreditCard);
        }

        /// <summary>
        /// Returns true if CreditCard instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCard other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CardNumber == other.CardNumber ||
                    this.CardNumber != null &&
                    this.CardNumber.Equals(other.CardNumber)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.CardType == other.CardType ||
                    this.CardType != null &&
                    this.CardType.Equals(other.CardType)
                ) && 
                (
                    this.CardCode == other.CardCode ||
                    this.CardCode != null &&
                    this.CardCode.Equals(other.CardCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CardNumber != null)
                    hash = hash * 59 + this.CardNumber.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.CardType != null)
                    hash = hash * 59 + this.CardType.GetHashCode();
                if (this.CardCode != null)
                    hash = hash * 59 + this.CardCode.GetHashCode();
                return hash;
            }
        }
    }

}
