/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AuthorizeNet.Rest.Model
{
    /// <summary>
    /// CreateInvoice
    /// </summary>
    [DataContract]
    public partial class CreateInvoice :  IEquatable<CreateInvoice>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInvoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateInvoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInvoice" /> class.
        /// </summary>
        /// <param name="InvoiceNumber">InvoiceNumber.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Customer">Customer (required).</param>
        /// <param name="PayerName">PayerName (required).</param>
        /// <param name="PaymentDueDate">PaymentDueDate (required).</param>
        /// <param name="SubAmount">SubAmount.</param>
        /// <param name="DiscountPercent">DiscountPercent.</param>
        /// <param name="DiscountAmount">DiscountAmount.</param>
        /// <param name="TotalAmount">TotalAmount (required).</param>
        /// <param name="LineItems">LineItems.</param>
        /// <param name="Tax">Tax.</param>
        /// <param name="SendEmailImmediately">SendEmailImmediately.</param>
        public CreateInvoice(string InvoiceNumber = null, string Description = null, Customer Customer = null, string PayerName = null, string PaymentDueDate = null, decimal? SubAmount = null, decimal? DiscountPercent = null, decimal? DiscountAmount = null, decimal? TotalAmount = null, List<LineItem> LineItems = null, Tax Tax = null, bool? SendEmailImmediately = null)
        {
            // to ensure "Customer" is required (not null)
            if (Customer == null)
            {
                throw new InvalidDataException("Customer is a required property for CreateInvoice and cannot be null");
            }
            else
            {
                this.Customer = Customer;
            }
            // to ensure "PayerName" is required (not null)
            if (PayerName == null)
            {
                throw new InvalidDataException("PayerName is a required property for CreateInvoice and cannot be null");
            }
            else
            {
                this.PayerName = PayerName;
            }
            // to ensure "PaymentDueDate" is required (not null)
            if (PaymentDueDate == null)
            {
                throw new InvalidDataException("PaymentDueDate is a required property for CreateInvoice and cannot be null");
            }
            else
            {
                this.PaymentDueDate = PaymentDueDate;
            }
            // to ensure "TotalAmount" is required (not null)
            if (TotalAmount == null)
            {
                throw new InvalidDataException("TotalAmount is a required property for CreateInvoice and cannot be null");
            }
            else
            {
                this.TotalAmount = TotalAmount;
            }
            this.InvoiceNumber = InvoiceNumber;
            this.Description = Description;
            this.SubAmount = SubAmount;
            this.DiscountPercent = DiscountPercent;
            this.DiscountAmount = DiscountAmount;
            this.LineItems = LineItems;
            this.Tax = Tax;
            this.SendEmailImmediately = SendEmailImmediately;
        }
        
        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public Customer Customer { get; set; }
        /// <summary>
        /// Gets or Sets PayerName
        /// </summary>
        [DataMember(Name="payerName", EmitDefaultValue=false)]
        public string PayerName { get; set; }
        /// <summary>
        /// Gets or Sets PaymentDueDate
        /// </summary>
        [DataMember(Name="paymentDueDate", EmitDefaultValue=false)]
        public string PaymentDueDate { get; set; }
        /// <summary>
        /// Gets or Sets SubAmount
        /// </summary>
        [DataMember(Name="subAmount", EmitDefaultValue=false)]
        public decimal? SubAmount { get; set; }
        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name="discountPercent", EmitDefaultValue=false)]
        public decimal? DiscountPercent { get; set; }
        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name="discountAmount", EmitDefaultValue=false)]
        public decimal? DiscountAmount { get; set; }
        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public decimal? TotalAmount { get; set; }
        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name="lineItems", EmitDefaultValue=false)]
        public List<LineItem> LineItems { get; set; }
        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public Tax Tax { get; set; }
        /// <summary>
        /// Gets or Sets SendEmailImmediately
        /// </summary>
        [DataMember(Name="sendEmailImmediately", EmitDefaultValue=false)]
        public bool? SendEmailImmediately { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateInvoice {\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  PayerName: ").Append(PayerName).Append("\n");
            sb.Append("  PaymentDueDate: ").Append(PaymentDueDate).Append("\n");
            sb.Append("  SubAmount: ").Append(SubAmount).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  SendEmailImmediately: ").Append(SendEmailImmediately).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateInvoice);
        }

        /// <summary>
        /// Returns true if CreateInvoice instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateInvoice other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InvoiceNumber == other.InvoiceNumber ||
                    this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.PayerName == other.PayerName ||
                    this.PayerName != null &&
                    this.PayerName.Equals(other.PayerName)
                ) && 
                (
                    this.PaymentDueDate == other.PaymentDueDate ||
                    this.PaymentDueDate != null &&
                    this.PaymentDueDate.Equals(other.PaymentDueDate)
                ) && 
                (
                    this.SubAmount == other.SubAmount ||
                    this.SubAmount != null &&
                    this.SubAmount.Equals(other.SubAmount)
                ) && 
                (
                    this.DiscountPercent == other.DiscountPercent ||
                    this.DiscountPercent != null &&
                    this.DiscountPercent.Equals(other.DiscountPercent)
                ) && 
                (
                    this.DiscountAmount == other.DiscountAmount ||
                    this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(other.DiscountAmount)
                ) && 
                (
                    this.TotalAmount == other.TotalAmount ||
                    this.TotalAmount != null &&
                    this.TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    this.LineItems == other.LineItems ||
                    this.LineItems != null &&
                    this.LineItems.SequenceEqual(other.LineItems)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.SendEmailImmediately == other.SendEmailImmediately ||
                    this.SendEmailImmediately != null &&
                    this.SendEmailImmediately.Equals(other.SendEmailImmediately)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InvoiceNumber != null)
                    hash = hash * 59 + this.InvoiceNumber.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                if (this.PayerName != null)
                    hash = hash * 59 + this.PayerName.GetHashCode();
                if (this.PaymentDueDate != null)
                    hash = hash * 59 + this.PaymentDueDate.GetHashCode();
                if (this.SubAmount != null)
                    hash = hash * 59 + this.SubAmount.GetHashCode();
                if (this.DiscountPercent != null)
                    hash = hash * 59 + this.DiscountPercent.GetHashCode();
                if (this.DiscountAmount != null)
                    hash = hash * 59 + this.DiscountAmount.GetHashCode();
                if (this.TotalAmount != null)
                    hash = hash * 59 + this.TotalAmount.GetHashCode();
                if (this.LineItems != null)
                    hash = hash * 59 + this.LineItems.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.SendEmailImmediately != null)
                    hash = hash * 59 + this.SendEmailImmediately.GetHashCode();
                return hash;
            }
        }
    }

}
