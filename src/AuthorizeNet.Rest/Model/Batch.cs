/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AuthorizeNet.Rest.Model
{
    /// <summary>
    /// Model for Batch
    /// </summary>
    [DataContract]
    public partial class Batch :  IEquatable<Batch>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Batch" /> class.
        /// </summary>
        /// <param name="BatchID">BatchID.</param>
        /// <param name="SettlementState">SettlementState.</param>
        /// <param name="SettlmentTimeUTC">SettlmentTimeUTC.</param>
        public Batch(string BatchID = null, string SettlementState = null, string SettlmentTimeUTC = null)
        {
            this.BatchID = BatchID;
            this.SettlementState = SettlementState;
            this.SettlmentTimeUTC = SettlmentTimeUTC;
        }
        
        /// <summary>
        /// Gets or Sets BatchID
        /// </summary>
        [DataMember(Name="batchID", EmitDefaultValue=false)]
        public string BatchID { get; set; }
        /// <summary>
        /// Gets or Sets SettlementState
        /// </summary>
        [DataMember(Name="settlementState", EmitDefaultValue=false)]
        public string SettlementState { get; set; }
        /// <summary>
        /// Gets or Sets SettlmentTimeUTC
        /// </summary>
        [DataMember(Name="settlmentTimeUTC", EmitDefaultValue=false)]
        public string SettlmentTimeUTC { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Batch {\n");
            sb.Append("  BatchID: ").Append(BatchID).Append("\n");
            sb.Append("  SettlementState: ").Append(SettlementState).Append("\n");
            sb.Append("  SettlmentTimeUTC: ").Append(SettlmentTimeUTC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Batch);
        }

        /// <summary>
        /// Returns true if Batch instances are equal
        /// </summary>
        /// <param name="other">Instance of Batch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Batch other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BatchID == other.BatchID ||
                    this.BatchID != null &&
                    this.BatchID.Equals(other.BatchID)
                ) && 
                (
                    this.SettlementState == other.SettlementState ||
                    this.SettlementState != null &&
                    this.SettlementState.Equals(other.SettlementState)
                ) && 
                (
                    this.SettlmentTimeUTC == other.SettlmentTimeUTC ||
                    this.SettlmentTimeUTC != null &&
                    this.SettlmentTimeUTC.Equals(other.SettlmentTimeUTC)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BatchID != null)
                    hash = hash * 59 + this.BatchID.GetHashCode();
                if (this.SettlementState != null)
                    hash = hash * 59 + this.SettlementState.GetHashCode();
                if (this.SettlmentTimeUTC != null)
                    hash = hash * 59 + this.SettlmentTimeUTC.GetHashCode();
                return hash;
            }
        }
    }

}
