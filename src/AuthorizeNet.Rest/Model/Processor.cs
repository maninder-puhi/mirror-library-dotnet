/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AuthorizeNet.Rest.Model
{
    /// <summary>
    /// Processor
    /// </summary>
    [DataContract]
    public partial class Processor :  IEquatable<Processor>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Processor" /> class.
        /// </summary>
        /// <param name="AuthCode">AuthCode.</param>
        /// <param name="AvsResponse">AvsResponse.</param>
        /// <param name="CardCodeResponse">CardCodeResponse.</param>
        public Processor(string AuthCode = null, string AvsResponse = null, string CardCodeResponse = null)
        {
            this.AuthCode = AuthCode;
            this.AvsResponse = AvsResponse;
            this.CardCodeResponse = CardCodeResponse;
        }
        
        /// <summary>
        /// Gets or Sets AuthCode
        /// </summary>
        [DataMember(Name="authCode", EmitDefaultValue=false)]
        public string AuthCode { get; set; }
        /// <summary>
        /// Gets or Sets AvsResponse
        /// </summary>
        [DataMember(Name="avsResponse", EmitDefaultValue=false)]
        public string AvsResponse { get; set; }
        /// <summary>
        /// Gets or Sets CardCodeResponse
        /// </summary>
        [DataMember(Name="cardCodeResponse", EmitDefaultValue=false)]
        public string CardCodeResponse { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Processor {\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  AvsResponse: ").Append(AvsResponse).Append("\n");
            sb.Append("  CardCodeResponse: ").Append(CardCodeResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Processor);
        }

        /// <summary>
        /// Returns true if Processor instances are equal
        /// </summary>
        /// <param name="other">Instance of Processor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Processor other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AuthCode == other.AuthCode ||
                    this.AuthCode != null &&
                    this.AuthCode.Equals(other.AuthCode)
                ) && 
                (
                    this.AvsResponse == other.AvsResponse ||
                    this.AvsResponse != null &&
                    this.AvsResponse.Equals(other.AvsResponse)
                ) && 
                (
                    this.CardCodeResponse == other.CardCodeResponse ||
                    this.CardCodeResponse != null &&
                    this.CardCodeResponse.Equals(other.CardCodeResponse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AuthCode != null)
                    hash = hash * 59 + this.AuthCode.GetHashCode();
                if (this.AvsResponse != null)
                    hash = hash * 59 + this.AvsResponse.GetHashCode();
                if (this.CardCodeResponse != null)
                    hash = hash * 59 + this.CardCodeResponse.GetHashCode();
                return hash;
            }
        }
    }

}
