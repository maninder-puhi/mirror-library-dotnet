/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AuthorizeNet.Rest.Model
{
    /// <summary>
    /// Model for PaymentInstrument
    /// </summary>
    [DataContract]
    public partial class PaymentInstrument :  IEquatable<PaymentInstrument>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInstrument" /> class.
        /// </summary>
        /// <param name="CreditCard">CreditCard.</param>
        /// <param name="BankAccount">BankAccount.</param>
        /// <param name="FluidData">FluidData.</param>
        /// <param name="Customer">Customer.</param>
        /// <param name="Validate">Validate.</param>
        public PaymentInstrument(CreditCard CreditCard = null, BankAccount BankAccount = null, FluidData FluidData = null, CustomerPayment Customer = null, bool? Validate = null)
        {
            this.CreditCard = CreditCard;
            this.BankAccount = BankAccount;
            this.FluidData = FluidData;
            this.Customer = Customer;
            this.Validate = Validate;
        }
        
        /// <summary>
        /// Gets or Sets CreditCard
        /// </summary>
        [DataMember(Name="creditCard", EmitDefaultValue=false)]
        public CreditCard CreditCard { get; set; }
        /// <summary>
        /// Gets or Sets BankAccount
        /// </summary>
        [DataMember(Name="bankAccount", EmitDefaultValue=false)]
        public BankAccount BankAccount { get; set; }
        /// <summary>
        /// Gets or Sets FluidData
        /// </summary>
        [DataMember(Name="fluidData", EmitDefaultValue=false)]
        public FluidData FluidData { get; set; }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public CustomerPayment Customer { get; set; }
        /// <summary>
        /// Gets or Sets Validate
        /// </summary>
        [DataMember(Name="validate", EmitDefaultValue=false)]
        public bool? Validate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentInstrument {\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  FluidData: ").Append(FluidData).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Validate: ").Append(Validate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentInstrument);
        }

        /// <summary>
        /// Returns true if PaymentInstrument instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentInstrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentInstrument other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreditCard == other.CreditCard ||
                    this.CreditCard != null &&
                    this.CreditCard.Equals(other.CreditCard)
                ) && 
                (
                    this.BankAccount == other.BankAccount ||
                    this.BankAccount != null &&
                    this.BankAccount.Equals(other.BankAccount)
                ) && 
                (
                    this.FluidData == other.FluidData ||
                    this.FluidData != null &&
                    this.FluidData.Equals(other.FluidData)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.Validate == other.Validate ||
                    this.Validate != null &&
                    this.Validate.Equals(other.Validate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreditCard != null)
                    hash = hash * 59 + this.CreditCard.GetHashCode();
                if (this.BankAccount != null)
                    hash = hash * 59 + this.BankAccount.GetHashCode();
                if (this.FluidData != null)
                    hash = hash * 59 + this.FluidData.GetHashCode();
                if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                if (this.Validate != null)
                    hash = hash * 59 + this.Validate.GetHashCode();
                return hash;
            }
        }
    }

}
