/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AuthorizeNet.Rest.Model
{
    /// <summary>
    /// Model for ForcedCaptureRequest
    /// </summary>
    [DataContract]
    public partial class ForcedCaptureRequest :  IEquatable<ForcedCaptureRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForcedCaptureRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ForcedCaptureRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ForcedCaptureRequest" /> class.
        /// </summary>
        /// <param name="Amount">Amount (required).</param>
        /// <param name="AuthCode">AuthCode (required).</param>
        /// <param name="PaymentInstrument">PaymentInstrument (required).</param>
        public ForcedCaptureRequest(string Amount = null, string AuthCode = null, PaymentInstrument PaymentInstrument = null)
        {
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for ForcedCaptureRequest and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "AuthCode" is required (not null)
            if (AuthCode == null)
            {
                throw new InvalidDataException("AuthCode is a required property for ForcedCaptureRequest and cannot be null");
            }
            else
            {
                this.AuthCode = AuthCode;
            }
            // to ensure "PaymentInstrument" is required (not null)
            if (PaymentInstrument == null)
            {
                throw new InvalidDataException("PaymentInstrument is a required property for ForcedCaptureRequest and cannot be null");
            }
            else
            {
                this.PaymentInstrument = PaymentInstrument;
            }
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }
        /// <summary>
        /// Gets or Sets AuthCode
        /// </summary>
        [DataMember(Name="authCode", EmitDefaultValue=false)]
        public string AuthCode { get; set; }
        /// <summary>
        /// Gets or Sets PaymentInstrument
        /// </summary>
        [DataMember(Name="paymentInstrument", EmitDefaultValue=false)]
        public PaymentInstrument PaymentInstrument { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForcedCaptureRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  PaymentInstrument: ").Append(PaymentInstrument).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ForcedCaptureRequest);
        }

        /// <summary>
        /// Returns true if ForcedCaptureRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ForcedCaptureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForcedCaptureRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.AuthCode == other.AuthCode ||
                    this.AuthCode != null &&
                    this.AuthCode.Equals(other.AuthCode)
                ) && 
                (
                    this.PaymentInstrument == other.PaymentInstrument ||
                    this.PaymentInstrument != null &&
                    this.PaymentInstrument.Equals(other.PaymentInstrument)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.AuthCode != null)
                    hash = hash * 59 + this.AuthCode.GetHashCode();
                if (this.PaymentInstrument != null)
                    hash = hash * 59 + this.PaymentInstrument.GetHashCode();
                return hash;
            }
        }
    }

}
