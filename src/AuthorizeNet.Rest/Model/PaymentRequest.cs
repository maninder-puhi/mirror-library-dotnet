/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AuthorizeNet.Rest.Model
{
    /// <summary>
    /// Model for PaymentRequest
    /// </summary>
    [DataContract]
    public partial class PaymentRequest :  IEquatable<PaymentRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequest" /> class.
        /// </summary>
        /// <param name="Capture">Capture.</param>
        /// <param name="AmountDetail">AmountDetail (required).</param>
        /// <param name="Solution">Solution.</param>
        /// <param name="PaymentInstrument">PaymentInstrument (required).</param>
        /// <param name="BillTo">BillTo.</param>
        /// <param name="ShipTo">ShipTo.</param>
        /// <param name="CustomerIp">CustomerIp.</param>
        /// <param name="Order">Order.</param>
        /// <param name="Tax">Tax.</param>
        /// <param name="Duty">Duty.</param>
        /// <param name="Shipping">Shipping.</param>
        /// <param name="LineItems">LineItems.</param>
        public PaymentRequest(bool? Capture = null, AmountDetail AmountDetail = null, Solution Solution = null, PaymentInstrument PaymentInstrument = null, BaseAddress BillTo = null, BaseAddress ShipTo = null, string CustomerIp = null, Order Order = null, ExtendedAmount Tax = null, ExtendedAmount Duty = null, ExtendedAmount Shipping = null, List<LineItem> LineItems = null)
        {
            // to ensure "AmountDetail" is required (not null)
            if (AmountDetail == null)
            {
                throw new InvalidDataException("AmountDetail is a required property for PaymentRequest and cannot be null");
            }
            else
            {
                this.AmountDetail = AmountDetail;
            }
            // to ensure "PaymentInstrument" is required (not null)
            if (PaymentInstrument == null)
            {
                throw new InvalidDataException("PaymentInstrument is a required property for PaymentRequest and cannot be null");
            }
            else
            {
                this.PaymentInstrument = PaymentInstrument;
            }
            this.Capture = Capture;
            this.Solution = Solution;
            this.BillTo = BillTo;
            this.ShipTo = ShipTo;
            this.CustomerIp = CustomerIp;
            this.Order = Order;
            this.Tax = Tax;
            this.Duty = Duty;
            this.Shipping = Shipping;
            this.LineItems = LineItems;
        }
        
        /// <summary>
        /// Gets or Sets Capture
        /// </summary>
        [DataMember(Name="capture", EmitDefaultValue=false)]
        public bool? Capture { get; set; }
        /// <summary>
        /// Gets or Sets AmountDetail
        /// </summary>
        [DataMember(Name="amountDetail", EmitDefaultValue=false)]
        public AmountDetail AmountDetail { get; set; }
        /// <summary>
        /// Gets or Sets Solution
        /// </summary>
        [DataMember(Name="solution", EmitDefaultValue=false)]
        public Solution Solution { get; set; }
        /// <summary>
        /// Gets or Sets PaymentInstrument
        /// </summary>
        [DataMember(Name="paymentInstrument", EmitDefaultValue=false)]
        public PaymentInstrument PaymentInstrument { get; set; }
        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name="billTo", EmitDefaultValue=false)]
        public BaseAddress BillTo { get; set; }
        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name="shipTo", EmitDefaultValue=false)]
        public BaseAddress ShipTo { get; set; }
        /// <summary>
        /// Gets or Sets CustomerIp
        /// </summary>
        [DataMember(Name="customerIp", EmitDefaultValue=false)]
        public string CustomerIp { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public Order Order { get; set; }
        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public ExtendedAmount Tax { get; set; }
        /// <summary>
        /// Gets or Sets Duty
        /// </summary>
        [DataMember(Name="duty", EmitDefaultValue=false)]
        public ExtendedAmount Duty { get; set; }
        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name="shipping", EmitDefaultValue=false)]
        public ExtendedAmount Shipping { get; set; }
        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name="lineItems", EmitDefaultValue=false)]
        public List<LineItem> LineItems { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRequest {\n");
            sb.Append("  Capture: ").Append(Capture).Append("\n");
            sb.Append("  AmountDetail: ").Append(AmountDetail).Append("\n");
            sb.Append("  Solution: ").Append(Solution).Append("\n");
            sb.Append("  PaymentInstrument: ").Append(PaymentInstrument).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  CustomerIp: ").Append(CustomerIp).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Duty: ").Append(Duty).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentRequest);
        }

        /// <summary>
        /// Returns true if PaymentRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Capture == other.Capture ||
                    this.Capture != null &&
                    this.Capture.Equals(other.Capture)
                ) && 
                (
                    this.AmountDetail == other.AmountDetail ||
                    this.AmountDetail != null &&
                    this.AmountDetail.Equals(other.AmountDetail)
                ) && 
                (
                    this.Solution == other.Solution ||
                    this.Solution != null &&
                    this.Solution.Equals(other.Solution)
                ) && 
                (
                    this.PaymentInstrument == other.PaymentInstrument ||
                    this.PaymentInstrument != null &&
                    this.PaymentInstrument.Equals(other.PaymentInstrument)
                ) && 
                (
                    this.BillTo == other.BillTo ||
                    this.BillTo != null &&
                    this.BillTo.Equals(other.BillTo)
                ) && 
                (
                    this.ShipTo == other.ShipTo ||
                    this.ShipTo != null &&
                    this.ShipTo.Equals(other.ShipTo)
                ) && 
                (
                    this.CustomerIp == other.CustomerIp ||
                    this.CustomerIp != null &&
                    this.CustomerIp.Equals(other.CustomerIp)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.Duty == other.Duty ||
                    this.Duty != null &&
                    this.Duty.Equals(other.Duty)
                ) && 
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping != null &&
                    this.Shipping.Equals(other.Shipping)
                ) && 
                (
                    this.LineItems == other.LineItems ||
                    this.LineItems != null &&
                    this.LineItems.SequenceEqual(other.LineItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Capture != null)
                    hash = hash * 59 + this.Capture.GetHashCode();
                if (this.AmountDetail != null)
                    hash = hash * 59 + this.AmountDetail.GetHashCode();
                if (this.Solution != null)
                    hash = hash * 59 + this.Solution.GetHashCode();
                if (this.PaymentInstrument != null)
                    hash = hash * 59 + this.PaymentInstrument.GetHashCode();
                if (this.BillTo != null)
                    hash = hash * 59 + this.BillTo.GetHashCode();
                if (this.ShipTo != null)
                    hash = hash * 59 + this.ShipTo.GetHashCode();
                if (this.CustomerIp != null)
                    hash = hash * 59 + this.CustomerIp.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.Duty != null)
                    hash = hash * 59 + this.Duty.GetHashCode();
                if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                if (this.LineItems != null)
                    hash = hash * 59 + this.LineItems.GetHashCode();
                return hash;
            }
        }
    }

}
