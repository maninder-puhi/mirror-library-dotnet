/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;
using NMock;

using AuthorizeNet.Rest.Client;
using AuthorizeNet.Rest.Api;
using AuthorizeNet.Rest.Model;
using System.Net;

namespace AuthorizeNet.Rest.Test
{
    /// <summary>
    ///  Class for testing WebhooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WebhooksApiTests
    {
        private WebhooksApi instance;

        private MockFactory mockFactory = new MockFactory();
        
        private Mock<IRestClient> mockRestClient;

        private RestResponse webhookResponse = null;
        private RestResponse deleteResponse = null;
        private RestResponse webhookCollectionResponse = null;
        private RestResponse pingsResponse = null;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            mockRestClient = mockFactory.CreateMock<IRestClient>();
            mockRestClient.Expects.AtLeastOne.GetProperty(_ => _.Timeout).WillReturn(60000);
            mockRestClient.Expects.AtLeastOne.GetProperty(_ => _.UserAgent).WillReturn("asdasd");
            mockRestClient.Expects.AtLeastOne.SetPropertyTo(_ => _.Timeout = 60000);
            mockRestClient.Expects.AtLeastOne.SetPropertyTo(_ => _.UserAgent = "asdasd");

            webhookResponse = new RestResponse
            {
                StatusCode = HttpStatusCode.OK,
                Content = @"{
                    ""_links"": {
                        ""self"": {
                        ""href"": ""/rest/v1/webhooks/a9d073b4-186e-4762-8ead-eb9fc9f76cda""
                                }
                            },
                    ""webhookId"": ""a9d073b4-186e-4762-8ead-eb9fc9f76cda"",
                    ""name"": ""Webkook sample test"",
                    ""status"": ""inactive"",
                    ""url"": ""https://requestb.in/vqtt30vq"",
                    ""eventTypes"": [
                    ""net.authorize.customer.created""
                        ]
                    }"
            };
            webhookCollectionResponse = new RestResponse
            {
                StatusCode = HttpStatusCode.OK,
                Content = @"[{
                            ""_links"": {
                              ""self"": {
                                ""href"": ""/rest/v1/webhooks/c06d8249-2b56-4665-9c6d-00b01101e0d8""
                              }
                            },
                            ""webhookId"": ""c06d8249-2b56-4665-9c6d-00b01101e0d8"",
                            ""name"": ""Demowebhook"",
                            ""status"": ""inactive"",
                            ""url"": ""https://demo.com/"",
                            ""eventTypes"": [
                              ""net.authorize.customer.created""
                            ]
                          },
                          {
                            ""_links"": {
                              ""self"": {
                                ""href"": ""/rest/v1/webhooks/0015dcc0-4d81-4ce9-b504-01e6794b6361""
                              }
                            },
                            ""webhookId"": ""0015dcc0-4d81-4ce9-b504-01e6794b6361"",
                            ""name"": ""Demowebhook"",
                            ""status"": ""inactive"",
                            ""url"": ""https://demo.com/"",
                            ""eventTypes"": [
                              ""net.authorize.customer.created""
                            ]
                          }]"
            };

            deleteResponse = new RestResponse
            {
                StatusCode = HttpStatusCode.OK,
                Content = @""
            };

            pingsResponse = new RestResponse
            {
                StatusCode = HttpStatusCode.OK,
                Content = @""
            };
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test CreateWebhook
        /// </summary>
        [Test]
        public void CreateWebhookTest()
        {
            string authorization = "Basic asdadsa";

            CreateWebhookBody createWebhookBody = new CreateWebhookBody("Demo WebHook Notifi", "https://requestb.in/x4i0vmx4", null, "InActive");
            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(webhookResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };

            instance = new WebhooksApi(configuration);

            var response = instance.CreateWebhook(createWebhookBody, authorization);
            Assert.IsInstanceOf<GetWebhookResponse>(response, "response is GetWebhookResponse");
        }

        /// <summary>
        /// Test DeleteWebhook
        /// </summary>
        [Test]
        public void DeleteWebhookTest()
        {
            string authorization = "Basic asdadsa";
            string webhookId = "1236547";
            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(deleteResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };

            instance = new WebhooksApi(configuration);

            instance.DeleteWebhook(authorization, webhookId);
        }

        /// <summary>
        /// Test GetWebhook
        /// </summary>
        [Test]
        public void GetWebhookTest()
        {
            string authorization = "Basic asdadsa";
            string webhookId = "1236547";
            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(webhookResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };

            instance = new WebhooksApi(configuration);

            var response = instance.GetWebhook(authorization, webhookId);
            Assert.IsInstanceOf<GetWebhookResponse>(response, "response is GetWebhookResponse");
        }

        /// <summary>
        /// Test GetWebhooks
        /// </summary>
        [Test]
        public void GetWebhooksTest()
        {
            string authorization = "Basic asdadsa";
            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(webhookCollectionResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };
            instance = new WebhooksApi(configuration);
            var response = instance.GetWebhooks(authorization);
            Assert.IsInstanceOf<List<GetWebhookResponse>>(response, "response is List<GetWebhookResponse>");
        }

        /// <summary>
        /// Test PingsWebhook
        /// </summary>
        [Test]
        public void PingsWebhookTest()
        {
            string authorization = "Basic asdadsa";
            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(pingsResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;
            string webhookId = "1236547";
            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };
            instance = new WebhooksApi(configuration);
            instance.PingsWebhook(authorization, webhookId);
        }
        
        /// <summary>
        /// Test UpdateWebhook
        /// </summary>
        [Test]
        public void UpdateWebhookTest()
        {
            string authorization = "Basic asdadsa";
            string webhookId = "1236547";

            CreateWebhookBody updateWebhookBody = new CreateWebhookBody("Demo WebHook Notifi", "https://requestb.in/x4i0vmx4", null, "InActive");
            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(webhookResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };

            instance = new WebhooksApi(configuration);

            var response = instance.UpdateWebhook(webhookId, updateWebhookBody, authorization);
            Assert.IsInstanceOf<GetWebhookResponse>(response, "response is GetWebhookResponse");
        }
    }
}
