/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;
using NMock;

using AuthorizeNet.Rest.Client;
using AuthorizeNet.Rest.Api;
using AuthorizeNet.Rest.Model;

namespace AuthorizeNet.Rest.Test
{
    /// <summary>
    ///  Class for testing EventtypesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EventtypesApiTests
    {
        private EventtypesApi instance;

        private MockFactory mockFactory = new MockFactory();
        
        private Mock<IRestClient> mockRestClient;

        private RestResponse eventTypesResponse = null;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            mockRestClient = mockFactory.CreateMock<IRestClient>();
            mockRestClient.Expects.AtLeastOne.GetProperty(_ => _.Timeout).WillReturn(60000);
            mockRestClient.Expects.AtLeastOne.GetProperty(_ => _.UserAgent).WillReturn("asdasd");
            mockRestClient.Expects.AtLeastOne.SetPropertyTo(_ => _.Timeout = 60000);
            mockRestClient.Expects.AtLeastOne.SetPropertyTo(_ => _.UserAgent = "asdasd");

            eventTypesResponse = new RestResponse
            {
                StatusCode = System.Net.HttpStatusCode.OK,
                Content = @"[  { ""name"": ""net.authorize.customer.created"" },
                { ""name"": ""net.authorize.customer.deleted"" },
                { ""name"": ""net.authorize.customer.updated"" },
                { ""name"": ""net.authorize.customer.paymentProfile.created"" },
                { ""name"": ""net.authorize.customer.paymentProfile.deleted"" },
                { ""name"": ""net.authorize.customer.paymentProfile.updated"" },
                { ""name"": ""net.authorize.customer.subscription.cancelled"" },
                { ""name"": ""net.authorize.customer.subscription.created"" },
                { ""name"": ""net.authorize.customer.subscription.expiring"" },
                { ""name"": ""net.authorize.customer.subscription.suspended"" },
                { ""name"": ""net.authorize.customer.subscription.terminated"" },
                { ""name"": ""net.authorize.customer.subscription.updated"" },
                { ""name"": ""net.authorize.payment.authcapture.created"" },
                { ""name"": ""net.authorize.payment.authorization.created"" },
                { ""name"": ""net.authorize.payment.capture.created"" },
                { ""name"": ""net.authorize.payment.fraud.approved"" },
                { ""name"": ""net.authorize.payment.fraud.declined"" },
                { ""name"": ""net.authorize.payment.fraud.held"" },
                { ""name"": ""net.authorize.payment.priorAuthCapture.created"" },
                { ""name"": ""net.authorize.payment.refund.created"" },
                { ""name"": ""net.authorize.payment.void.created""  }]"
            };
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test GetEventTypes
        /// </summary>
        [Test]
        public void GetEventTypesTest()
        {
            string authorization = "Basic asdadsa";

            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(eventTypesResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };
            instance = new EventtypesApi(configuration);
            var response = instance.GetEventTypes(authorization);
            Assert.IsInstanceOf<List<EventType>>(response, "response is List<EventType>");
        }

    }

}
