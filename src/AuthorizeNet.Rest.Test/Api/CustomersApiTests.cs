/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;
using NMock;

using AuthorizeNet.Rest.Client;
using AuthorizeNet.Rest.Api;
using AuthorizeNet.Rest.Model;
using System.Net;

namespace AuthorizeNet.Rest.Test
{
    /// <summary>
    ///  Class for testing CustomersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CustomersApiTests
    {
        private CustomersApi instance;

        private MockFactory mockFactory = new MockFactory();
        
        private Mock<IRestClient> mockRestClient;

        private RestResponse customerResponse = null;
        private RestResponse deleteResponse = null;
        private RestResponse customerCollectionResponse = null;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            mockRestClient = mockFactory.CreateMock<IRestClient>();
            mockRestClient.Expects.AtLeastOne.GetProperty(_ => _.Timeout).WillReturn(60000);
            mockRestClient.Expects.AtLeastOne.GetProperty(_ => _.UserAgent).WillReturn("asdasd");
            mockRestClient.Expects.AtLeastOne.SetPropertyTo(_ => _.Timeout = 60000);
            mockRestClient.Expects.AtLeastOne.SetPropertyTo(_ => _.UserAgent = "asdasd");
            customerResponse = new RestResponse
            {
                StatusCode = HttpStatusCode.OK,
                Content = @"  
                  {  
                    ""id"": ""1813604247"",  
                      ""description"": ""asdasd"",  
                      ""identifier"": {  
                          ""email"": ""sad@asd.com"",  
                          ""reference"": ""1324535232""  
                      }
                  }"
            };

            deleteResponse = new RestResponse
            {
                StatusCode = HttpStatusCode.OK,
                Content = @""
            };

            customerCollectionResponse = new RestResponse
            {
                StatusCode = HttpStatusCode.OK,
                Content = @"{
                    ""_links"": {
                            ""self"": {
                            ""href"": ""/rest/v1/customers?offset=0&limit=100"",
                            ""method"": ""GET""
                                        }
                                    },
                     ""_embedded"": {
                            ""customers"": [
                                    {
                            ""id"": ""1812938352"",
                            ""description"": ""Profile description here"",
                            ""identifier"": {
                            ""email"": ""customer-profile-email@here.com"",
                            ""reference"": ""Merchant_Customer_ID""
                            },
                        ""_links"": {
                            ""self"": {
                            ""href"": ""/rest/v1/customers/1812938352"",
                            ""method"": ""GET""
                            },
                        ""paymentMethods"": {
                        ""href"": ""/rest/v1/customers/1812938352/paymentMethods"",
                        ""method"": ""GET""
                    },
                    ""addresses"": {
                                ""href"": ""/rest/v1/customers/1812938352/addresses"",
                                    ""method"": ""GET""
                          }
                        }
                      }
                    ]
                      },
                  ""totalCustomers"": 1
                }"
            };
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test CreateCustomer
        /// </summary>
        [Test]
        public void CreateCustomerTest()
        {
            string authorization = "Basic asdadsa";

            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(customerResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;
            Identifier identifier = new Identifier("custtest@gmail.com", "Customer Reference");
            CreateCustomer createCustomer = new CreateCustomer("create customer test", identifier, null);

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };

            instance = new CustomersApi(configuration);

            var response = instance.CreateCustomer(createCustomer, authorization);
            Assert.IsInstanceOf<Customer>(response, "response is Customer");
        }

        /// <summary>
        /// Test DeleteCustomer
        /// </summary>
        [Test]
        public void DeleteCustomerTest()
        {
            string authorization = "Basic asdadsa";
            string customerId = "123123";
            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(deleteResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };

            instance = new CustomersApi(configuration);

            instance.DeleteCustomer(authorization, customerId);
        }
        
        /// <summary>
        /// Test GetAllCustomers
        /// </summary>
        [Test]
        public void GetAllCustomersTest()
        {
            string authorization = "Basic asdadsa";

            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(customerCollectionResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };

            instance = new CustomersApi(configuration);

            var response = instance.GetAllCustomers(authorization);
            Assert.IsInstanceOf<CustomerCollection>(response, "response is Customer");
        }

        /// <summary>
        /// Test GetCustomer
        /// </summary>
        [Test]
        public void GetCustomerTest()
        {
            string authorization = "Basic asdadsa";
            string customerId = "123123";
            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(customerResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };

            instance = new CustomersApi(configuration);

            var response = instance.GetCustomer(authorization, customerId);
            Assert.IsInstanceOf<Customer>(response, "response is Customer");
        }

        /// <summary>
        /// Test UpdateCustomer
        /// </summary>
        [Test]
        public void UpdateCustomerTest()
        {
            string authorization = "Basic asdadsa";
            string customerId = "2345";

            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(customerResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;
            Identifier identifier = new Identifier("custtest@gmail.com", "Customer Reference");
            CreateCustomer updateCustomer = new CreateCustomer("create customer test", identifier, null);

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };

            instance = new CustomersApi(configuration);

            var response = instance.UpdateCustomer(customerId, updateCustomer, authorization);
            Assert.IsInstanceOf<Customer>(response, "response is Customer");
        }

    }

}
