/* 
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;
using NMock;

using AuthorizeNet.Rest.Client;
using AuthorizeNet.Rest.Api;
using AuthorizeNet.Rest.Model;
using System.Net;

namespace AuthorizeNet.Rest.Test
{
    /// <summary>
    ///  Class for testing NotificationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NotificationsApiTests
    {
        private NotificationsApi instance;

        private MockFactory mockFactory = new MockFactory();
        
        private Mock<IRestClient> mockRestClient;

        private RestResponse notificationResponse = null;

        private RestResponse allNotificationResponse = null;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            mockRestClient = mockFactory.CreateMock<IRestClient>();
            mockRestClient.Expects.AtLeastOne.GetProperty(_ => _.Timeout).WillReturn(60000);
            mockRestClient.Expects.AtLeastOne.GetProperty(_ => _.UserAgent).WillReturn("asdasd");
            mockRestClient.Expects.AtLeastOne.SetPropertyTo(_ => _.Timeout = 60000);
            mockRestClient.Expects.AtLeastOne.SetPropertyTo(_ => _.UserAgent = "asdasd");

            notificationResponse = new RestResponse
            {
                StatusCode = HttpStatusCode.OK,
                Content = @"{ ""_links"": { ""self"": { ""href"": "" / rest / v1 / notifications / e8223fe7 - 13cb - 4e04 - 881c - bf87b9beab28"" }
                                },  ""notificationId"": ""e8223fe7 - 13cb - 4e04 - 881c - bf87b9beab28"",  ""deliveryStatus"": ""Delivered"",  ""eventType"": ""net.authorize.customer.created"",  ""eventDate"": ""2017 - 10 - 26T12: 57:08.94"",  ""webhookId"": ""7ff82677 - 8413 - 4383 - 80d9 - 4630acff4a48"",  ""payload"": { ""merchantCustomerId"": ""php Referencess"",    ""description"": ""oCuiCthrePeta"",    ""entityName"": ""customerProfile"",    ""id"": ""1813418846""  }
                                 }"
            };
            allNotificationResponse = new RestResponse
            {
                StatusCode = HttpStatusCode.OK,
                Content = @"{ ""_links"": { ""self"": { ""href"": "" / rest / v1 / notifications ? offset = 0 & limit = 100 & deliverystatus = Delivered & from_date = 10 / 22 / 2017 12:27:25 PM & to_date = 12 / 21 / 2017 12:27:25 PM"" }
                             },  ""notifications"": [    {      ""_links"": {        ""self"": {          ""href"": ""/rest/v1/notifications/e8223fe7-13cb-4e04-881c-bf87b9beab28""        }
                            },      ""notificationId"": ""e8223fe7-13cb-4e04-881c-bf87b9beab28"",      ""deliveryStatus"": ""Delivered"",      ""eventType"": ""net.authorize.customer.created"",      ""eventDate"": ""2017-10-26T12:57:08.94"",      ""webhookId"": ""7ff82677-8413-4383-80d9-4630acff4a48""    },    {      ""_links"": {        ""self"": {          ""href"": ""/rest/v1/notifications/af63042c-4219-4fac-8b2b-0c0e82280d2b""        }      },      ""notificationId"": ""af63042c-4219-4fac-8b2b-0c0e82280d2b"",      ""deliveryStatus"": ""Delivered"",      ""eventType"": ""net.authorize.customer.created"",      ""eventDate"": ""2017-10-26T15:12:20.957"",      ""webhookId"": ""7ff82677-8413-4383-80d9-4630acff4a48""    }  ]}"
            };
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test GetNotification
        /// </summary>
        [Test]
        public void GetNotificationTest()
        {
            string authorization = "Basic asdadsa";

            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(notificationResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };
            instance = new NotificationsApi(configuration);
            string notificationsId = "e8223fe7-13cb-4e04-881c-bf87b9beab28";
            var response = instance.GetNotification(authorization, notificationsId);
            Assert.IsInstanceOf<GetNotificationResponse>(response, "response is GetNotificationResponse");
        }

        /// <summary>
        /// Test GetNotifications
        /// </summary>
        [Test]
        public void GetNotificationsTest()
        {
            string authorization = "Basic asdadsa";

            mockRestClient.Expects.One.Method(v => v.Execute(new RestRequest())).With(NMock.Is.TypeOf(typeof(RestRequest))).WillReturn(allNotificationResponse);
            ApiClient apiClient = new ApiClient(mockRestClient.MockObject);

            apiClient.Configuration = null;

            Configuration configuration = new Configuration
            {
                ApiClient = apiClient,
                Username = "Asdads",
                Password = "asdasd",
                AccessToken = null,
                ApiKey = null,
                ApiKeyPrefix = null,
                TempFolderPath = null,
                DateTimeFormat = null,
                Timeout = 60000,
                UserAgent = "asdasd"
            };
            instance = new NotificationsApi(configuration);
            string deliveryStatus = "Delivered";
            string fromDate = "2017-03-03";
            string toDate = "2018-03-03";
            int? offset = 0;
            int? limit = 100;
            var response = instance.GetNotifications(authorization, deliveryStatus, fromDate, toDate, offset, limit);
            Console.WriteLine(response);
            Assert.IsInstanceOf<GetNotificationsResponse>(response, "response is GetNotificationsResponse");
        }
    }

}
